def update_output(bulk_content, str_content, target_acos, selected_campaigns, selected_keywords):
    if not bulk_content or not str_content:
        return "Please upload both files.", [], [], [], [], [], [], [], []

    bulk_file = parse_contents(bulk_content)
    str_file = parse_contents(str_content)

    bulk_data = bulk_file.parse("Sponsored Products Campaigns")
    str_data = str_file.parse("Sponsored_Products_Search_term_")

    data = load_and_clean_data(bulk_data, str_data)
    metrics = calculate_metrics(data, target_acos / 100)

    campaigns = metrics["campaigns"]
    keywords = metrics["keywords"]
    search_terms = metrics["search_terms"]

    # Filter campaigns
    campaign_options = [{"label": name, "value": name} for name in campaigns["Campaign Name (Informational only)"].unique()]
    if selected_campaigns:
        campaigns = campaigns[campaigns["Campaign Name (Informational only)"].isin(selected_campaigns)]
        keywords = keywords[keywords["Campaign Name (Informational only)"].isin(selected_campaigns)]
        search_terms = search_terms[search_terms["Campaign Name"].isin(selected_campaigns)]

    # Filter keywords
    keyword_options = [{"label": name, "value": name} for name in keywords["Keyword Text"].unique()]
    if selected_keywords:
        keywords = keywords[keywords["Keyword Text"].isin(selected_keywords)]
        search_terms = search_terms[search_terms["Targeting"].isin(selected_keywords)]

    # Select only relevant columns for campaigns
    campaign_columns_to_show = [
        "Campaign Name", "Daily Budget", "Bidding Strategy", "Impressions", "Clicks", "CTR", "Spend", "CPC", "Sales", "ACOS", "Orders", "Conversion Rate"
    ]
    campaigns = campaigns[campaign_columns_to_show]

    # âœ… Apply percentage formatting for CTR, ACOS, and Conversion Rate
    campaigns["CTR"] = campaigns["CTR"].apply(lambda x: f"{x * 100:.2f}%")
    campaigns["ACOS"] = campaigns["ACOS"].apply(lambda x: f"{x * 100:.2f}%")
    campaigns["Conversion Rate"] = campaigns["Conversion Rate"].apply(lambda x: f"{x * 100:.2f}%")

    # Audit Summary
    summary = {
        "Total Campaigns": len(campaigns),
        "Total Keywords": len(keywords),
        "Total Search Terms": len(search_terms),
        "Average ACOS": f"{round(campaigns['ACOS'].str.rstrip('%').astype(float).mean(), 1)}%",
        "Total Revenue": f"${round(campaigns['Sales'].sum(), 2)}",
        "Total Clicks": int(campaigns["Clicks"].sum()),
    }

    summary_div = html.Div([
        html.H3("Audit Summary"),
        html.Ul([
            html.Li(f"{key}: {value}") for key, value in summary.items()
        ])
    ])

    # Prepare DataTables
    campaign_table = campaigns.to_dict("records")
    keyword_table = keywords.to_dict("records")
    search_term_table = search_terms.to_dict("records")

    campaign_columns = [{"name": col, "id": col} for col in campaigns.columns]
    keyword_columns = [{"name": col, "id": col} for col in keywords.columns]
    search_term_columns = [{"name": col, "id": col} for col in search_terms.columns]

    return summary_div, campaign_options, campaign_table, campaign_columns, keyword_options, keyword_table, keyword_columns, search_term_table, search_term_columns
